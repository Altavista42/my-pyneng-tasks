# -*- coding: utf-8 -*-
"""
Задание 15.1a

Скопировать функцию get_ip_from_cfg из задания 15.1 и переделать ее таким образом,
чтобы она возвращала словарь:
* ключ: имя интерфейса
* значение: кортеж с двумя строками:
  * IP-адрес
  * маска

В словарь добавлять только те интерфейсы, на которых настроены IP-адреса.

Например (взяты произвольные адреса):
{'FastEthernet0/1': ('10.0.1.1', '255.255.255.0'),
 'FastEthernet0/2': ('10.0.2.1', '255.255.255.0')}

Для получения такого результата, используйте регулярные выражения.

Проверить работу функции на примере файла config_r1.txt.

Обратите внимание, что в данном случае, можно не проверять корректность IP-адреса,
диапазоны адресов и так далее, так как обрабатывается вывод команды,
а не ввод пользователя.

"""
import re

regex = re.compile(r'interface (?P<intf>\S+)[^!]+ip address (?P<IP>\S+) (?P<mask>\S+)')

def get_ip_from_cfg(config_file):
	"""
	Функция обрабатывает конфигурационный файл и выводит имя интерфейса, IP-адрес, маску.
	config_file - Ожидает в качестве аргумента название конфигурационного файла.
	Возвращает словарь:
	- ключ: имя интерфейса
	- значение: кортеж с двумя строками:
	- IP-адрес
	- маска
	"""
	with open(config_file) as config:
		intf_dict = {line.group('intf'): line.group('IP','mask')
		 for line in regex.finditer(config.read())}
	return intf_dict


if __name__ == "__main__":
	print(get_ip_from_cfg("config_r2.txt"))